part of openai.api;

class CreateCompletionRequest {
  /* ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
  String model = null;
/* The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.  */
  OneOfCreateCompletionRequestPrompt prompt = <|endoftext|>;
/* The suffix that comes after a completion of inserted text. */
  String suffix = null;
/* The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).  */
  int maxTokens = 16;
  //enum maxTokensEnum {  };
/* What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.  We generally recommend altering this or `top_p` but not both.  */
  double temperature = 1;
/* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
  double topP = 1;
/* How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.  */
  int n = 1;
   // range from 1 to 128//
/* Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.  */
  bool stream = false;
/* Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  */
  int logprobs = null;
  //enum logprobsEnum {  };
/* Echo back the prompt in addition to the completion  */
  bool echo = false;
/* Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.  */
  OneOfCreateCompletionRequestStop stop = null;
/* Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)  */
  double presencePenalty = 0;
/* Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)  */
  double frequencyPenalty = 0;
/* Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.  */
  int bestOf = 1;
  //enum bestOfEnum {  };
/* Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.  */
  Object logitBias = null;
/* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
  String user = null;

  CreateCompletionRequest();

  @override
  String toString() {
    return 'CreateCompletionRequest[model=$model, prompt=$prompt, suffix=$suffix, maxTokens=$maxTokens, temperature=$temperature, topP=$topP, n=$n, stream=$stream, logprobs=$logprobs, echo=$echo, stop=$stop, presencePenalty=$presencePenalty, frequencyPenalty=$frequencyPenalty, bestOf=$bestOf, logitBias=$logitBias, user=$user, ]';
  }

  CreateCompletionRequest.fromJson(Map<String, dynamic> json) {
    if (json == null) return;
    model = json['model'];
    prompt = new OneOfCreateCompletionRequestPrompt.fromJson(json['prompt']);
    suffix = json['suffix'];
    maxTokens = json['max_tokens'];
    temperature = json['temperature'];
    topP = json['top_p'];
    n = json['n'];
    stream = json['stream'];
    logprobs = json['logprobs'];
    echo = json['echo'];
    stop = new OneOfCreateCompletionRequestStop.fromJson(json['stop']);
    presencePenalty = json['presence_penalty'];
    frequencyPenalty = json['frequency_penalty'];
    bestOf = json['best_of'];
    logitBias = new Object.fromJson(json['logit_bias']);
    user = json['user'];
  }

  Map<String, dynamic> toJson() {
    return {
      'model': model,
      'prompt': prompt,
      'suffix': suffix,
      'max_tokens': maxTokens,
      'temperature': temperature,
      'top_p': topP,
      'n': n,
      'stream': stream,
      'logprobs': logprobs,
      'echo': echo,
      'stop': stop,
      'presence_penalty': presencePenalty,
      'frequency_penalty': frequencyPenalty,
      'best_of': bestOf,
      'logit_bias': logitBias,
      'user': user
     };
  }

  static List<CreateCompletionRequest> listFromJson(List<dynamic> json) {
    return json == null ? new List<CreateCompletionRequest>() : json.map((value) => new CreateCompletionRequest.fromJson(value)).toList();
  }

  static Map<String, CreateCompletionRequest> mapFromJson(Map<String, Map<String, dynamic>> json) {
    var map = new Map<String, CreateCompletionRequest>();
    if (json != null && json.length > 0) {
      json.forEach((String key, Map<String, dynamic> value) => map[key] = new CreateCompletionRequest.fromJson(value));
    }
    return map;
  }
}
