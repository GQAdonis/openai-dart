//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openai.api;

class CreateAnswerRequest {
  /// Returns a new [CreateAnswerRequest] instance.
  CreateAnswerRequest({
    required this.model,
    required this.question,
    this.examples = const [],
    required this.examplesContext,
    this.documents = const [],
    this.file,
    this.searchModel = 'ada',
    this.maxRerank = 200,
    this.temperature = 0,
    this.logprobs,
    this.maxTokens = 16,
    this.stop,
    this.n = 1,
    this.logitBias,
    this.returnMetadata = false,
    this.returnPrompt = false,
    this.expand = const [],
    this.user,
  });

  /// ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  String model;

  /// Question to get answered.
  String question;

  /// List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
  List<List<String>> examples;

  /// A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
  String examplesContext;

  /// List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.  You should specify either `documents` or a `file`, but not both. 
  List<String>? documents;

  /// The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `documents` or a `file`, but not both. 
  String? file;

  /// ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  String? searchModel;

  /// The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
  int? maxRerank;

  /// What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use. Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
  num? temperature;

  /// Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs. 
  ///
  /// Minimum value: 0
  /// Maximum value: 5
  int? logprobs;

  /// The maximum number of tokens allowed for the generated answer
  int? maxTokens;

  CreateAnswerRequestStop? stop;

  /// How many answers to generate for each question.
  ///
  /// Minimum value: 1
  /// Maximum value: 10
  int? n;

  /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
  Object? logitBias;

  /// A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set. 
  bool? returnMetadata;

  /// If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
  bool? returnPrompt;

  /// If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
  List<Object>? expand;

  /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? user;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CreateAnswerRequest &&
     other.model == model &&
     other.question == question &&
     other.examples == examples &&
     other.examplesContext == examplesContext &&
     other.documents == documents &&
     other.file == file &&
     other.searchModel == searchModel &&
     other.maxRerank == maxRerank &&
     other.temperature == temperature &&
     other.logprobs == logprobs &&
     other.maxTokens == maxTokens &&
     other.stop == stop &&
     other.n == n &&
     other.logitBias == logitBias &&
     other.returnMetadata == returnMetadata &&
     other.returnPrompt == returnPrompt &&
     other.expand == expand &&
     other.user == user;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (model.hashCode) +
    (question.hashCode) +
    (examples.hashCode) +
    (examplesContext.hashCode) +
    (documents == null ? 0 : documents!.hashCode) +
    (file == null ? 0 : file!.hashCode) +
    (searchModel == null ? 0 : searchModel!.hashCode) +
    (maxRerank == null ? 0 : maxRerank!.hashCode) +
    (temperature == null ? 0 : temperature!.hashCode) +
    (logprobs == null ? 0 : logprobs!.hashCode) +
    (maxTokens == null ? 0 : maxTokens!.hashCode) +
    (stop == null ? 0 : stop!.hashCode) +
    (n == null ? 0 : n!.hashCode) +
    (logitBias == null ? 0 : logitBias!.hashCode) +
    (returnMetadata == null ? 0 : returnMetadata!.hashCode) +
    (returnPrompt == null ? 0 : returnPrompt!.hashCode) +
    (expand == null ? 0 : expand!.hashCode) +
    (user == null ? 0 : user!.hashCode);

  @override
  String toString() => 'CreateAnswerRequest[model=$model, question=$question, examples=$examples, examplesContext=$examplesContext, documents=$documents, file=$file, searchModel=$searchModel, maxRerank=$maxRerank, temperature=$temperature, logprobs=$logprobs, maxTokens=$maxTokens, stop=$stop, n=$n, logitBias=$logitBias, returnMetadata=$returnMetadata, returnPrompt=$returnPrompt, expand=$expand, user=$user]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'model'] = this.model;
      json[r'question'] = this.question;
      json[r'examples'] = this.examples;
      json[r'examples_context'] = this.examplesContext;
    if (this.documents != null) {
      json[r'documents'] = this.documents;
    } else {
      json[r'documents'] = null;
    }
    if (this.file != null) {
      json[r'file'] = this.file;
    } else {
      json[r'file'] = null;
    }
    if (this.searchModel != null) {
      json[r'search_model'] = this.searchModel;
    } else {
      json[r'search_model'] = null;
    }
    if (this.maxRerank != null) {
      json[r'max_rerank'] = this.maxRerank;
    } else {
      json[r'max_rerank'] = null;
    }
    if (this.temperature != null) {
      json[r'temperature'] = this.temperature;
    } else {
      json[r'temperature'] = null;
    }
    if (this.logprobs != null) {
      json[r'logprobs'] = this.logprobs;
    } else {
      json[r'logprobs'] = null;
    }
    if (this.maxTokens != null) {
      json[r'max_tokens'] = this.maxTokens;
    } else {
      json[r'max_tokens'] = null;
    }
    if (this.stop != null) {
      json[r'stop'] = this.stop;
    } else {
      json[r'stop'] = null;
    }
    if (this.n != null) {
      json[r'n'] = this.n;
    } else {
      json[r'n'] = null;
    }
    if (this.logitBias != null) {
      json[r'logit_bias'] = this.logitBias;
    } else {
      json[r'logit_bias'] = null;
    }
    if (this.returnMetadata != null) {
      json[r'return_metadata'] = this.returnMetadata;
    } else {
      json[r'return_metadata'] = null;
    }
    if (this.returnPrompt != null) {
      json[r'return_prompt'] = this.returnPrompt;
    } else {
      json[r'return_prompt'] = null;
    }
    if (this.expand != null) {
      json[r'expand'] = this.expand;
    } else {
      json[r'expand'] = null;
    }
    if (this.user != null) {
      json[r'user'] = this.user;
    } else {
      json[r'user'] = null;
    }
    return json;
  }

  /// Returns a new [CreateAnswerRequest] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CreateAnswerRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CreateAnswerRequest[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CreateAnswerRequest[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CreateAnswerRequest(
        model: mapValueOfType<String>(json, r'model')!,
        question: mapValueOfType<String>(json, r'question')!,
        examples: json[r'examples'] is List
          ? (json[r'examples'] as List).map(
              (e) => e == null ? null : (e as List).cast<String>()
            ).toList()
          : null,
        examplesContext: mapValueOfType<String>(json, r'examples_context')!,
        documents: json[r'documents'] is List
            ? (json[r'documents'] as List).cast<String>()
            : const [],
        file: mapValueOfType<String>(json, r'file'),
        searchModel: mapValueOfType<String>(json, r'search_model') ?? 'ada',
        maxRerank: mapValueOfType<int>(json, r'max_rerank') ?? 200,
        temperature: json[r'temperature'] == null
            ? 0
            : num.parse(json[r'temperature'].toString()),
        logprobs: mapValueOfType<int>(json, r'logprobs'),
        maxTokens: mapValueOfType<int>(json, r'max_tokens') ?? 16,
        stop: CreateAnswerRequestStop.fromJson(json[r'stop']),
        n: mapValueOfType<int>(json, r'n') ?? 1,
        logitBias: mapValueOfType<Object>(json, r'logit_bias'),
        returnMetadata: mapValueOfType<bool>(json, r'return_metadata') ?? false,
        returnPrompt: mapValueOfType<bool>(json, r'return_prompt') ?? false,
        expand: Object.listFromJson(json[r'expand']) ?? const [],
        user: mapValueOfType<String>(json, r'user'),
      );
    }
    return null;
  }

  static List<CreateAnswerRequest>? listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CreateAnswerRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreateAnswerRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CreateAnswerRequest> mapFromJson(dynamic json) {
    final map = <String, CreateAnswerRequest>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreateAnswerRequest.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CreateAnswerRequest-objects as value to a dart map
  static Map<String, List<CreateAnswerRequest>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CreateAnswerRequest>>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreateAnswerRequest.listFromJson(entry.value, growable: growable,);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'model',
    'question',
    'examples',
    'examples_context',
  };
}

