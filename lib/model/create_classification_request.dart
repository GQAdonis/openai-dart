//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openai.api;

class CreateClassificationRequest {
  /// Returns a new [CreateClassificationRequest] instance.
  CreateClassificationRequest({
    required this.model,
    required this.query,
    this.examples = const [],
    this.file,
    this.labels = const [],
    this.searchModel = 'ada',
    this.temperature = 0,
    this.logprobs,
    this.maxExamples = 200,
    this.logitBias,
    this.returnPrompt = false,
    this.returnMetadata = false,
    this.expand = const [],
    this.user,
  });

  /// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
  String model;

  /// Query to be classified.
  String query;

  /// A list of examples with labels, in the following format:  `[[\"The movie is so interesting.\", \"Positive\"], [\"It is quite boring.\", \"Negative\"], ...]`  All the label strings will be normalized to be capitalized.  You should specify either `examples` or `file`, but not both. 
  List<List<String>>? examples;

  /// The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `examples` or `file`, but not both. 
  String? file;

  /// The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
  List<String>? labels;

  /// ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
  String? searchModel;

  /// What sampling `temperature` to use. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
  ///
  /// Minimum value: 0
  /// Maximum value: 2
  num? temperature;

  /// Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs. 
  ///
  /// Minimum value: 0
  /// Maximum value: 5
  int? logprobs;

  /// The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
  int? maxExamples;

  /// Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
  Object? logitBias;

  /// If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
  bool? returnPrompt;

  /// A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set. 
  bool? returnMetadata;

  /// If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
  List<Object>? expand;

  /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  String? user;

  @override
  bool operator ==(Object other) => identical(this, other) || other is CreateClassificationRequest &&
     other.model == model &&
     other.query == query &&
     other.examples == examples &&
     other.file == file &&
     other.labels == labels &&
     other.searchModel == searchModel &&
     other.temperature == temperature &&
     other.logprobs == logprobs &&
     other.maxExamples == maxExamples &&
     other.logitBias == logitBias &&
     other.returnPrompt == returnPrompt &&
     other.returnMetadata == returnMetadata &&
     other.expand == expand &&
     other.user == user;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (model.hashCode) +
    (query.hashCode) +
    (examples == null ? 0 : examples!.hashCode) +
    (file == null ? 0 : file!.hashCode) +
    (labels == null ? 0 : labels!.hashCode) +
    (searchModel == null ? 0 : searchModel!.hashCode) +
    (temperature == null ? 0 : temperature!.hashCode) +
    (logprobs == null ? 0 : logprobs!.hashCode) +
    (maxExamples == null ? 0 : maxExamples!.hashCode) +
    (logitBias == null ? 0 : logitBias!.hashCode) +
    (returnPrompt == null ? 0 : returnPrompt!.hashCode) +
    (returnMetadata == null ? 0 : returnMetadata!.hashCode) +
    (expand == null ? 0 : expand!.hashCode) +
    (user == null ? 0 : user!.hashCode);

  @override
  String toString() => 'CreateClassificationRequest[model=$model, query=$query, examples=$examples, file=$file, labels=$labels, searchModel=$searchModel, temperature=$temperature, logprobs=$logprobs, maxExamples=$maxExamples, logitBias=$logitBias, returnPrompt=$returnPrompt, returnMetadata=$returnMetadata, expand=$expand, user=$user]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
      json[r'model'] = this.model;
      json[r'query'] = this.query;
    if (this.examples != null) {
      json[r'examples'] = this.examples;
    } else {
      json[r'examples'] = null;
    }
    if (this.file != null) {
      json[r'file'] = this.file;
    } else {
      json[r'file'] = null;
    }
    if (this.labels != null) {
      json[r'labels'] = this.labels;
    } else {
      json[r'labels'] = null;
    }
    if (this.searchModel != null) {
      json[r'search_model'] = this.searchModel;
    } else {
      json[r'search_model'] = null;
    }
    if (this.temperature != null) {
      json[r'temperature'] = this.temperature;
    } else {
      json[r'temperature'] = null;
    }
    if (this.logprobs != null) {
      json[r'logprobs'] = this.logprobs;
    } else {
      json[r'logprobs'] = null;
    }
    if (this.maxExamples != null) {
      json[r'max_examples'] = this.maxExamples;
    } else {
      json[r'max_examples'] = null;
    }
    if (this.logitBias != null) {
      json[r'logit_bias'] = this.logitBias;
    } else {
      json[r'logit_bias'] = null;
    }
    if (this.returnPrompt != null) {
      json[r'return_prompt'] = this.returnPrompt;
    } else {
      json[r'return_prompt'] = null;
    }
    if (this.returnMetadata != null) {
      json[r'return_metadata'] = this.returnMetadata;
    } else {
      json[r'return_metadata'] = null;
    }
    if (this.expand != null) {
      json[r'expand'] = this.expand;
    } else {
      json[r'expand'] = null;
    }
    if (this.user != null) {
      json[r'user'] = this.user;
    } else {
      json[r'user'] = null;
    }
    return json;
  }

  /// Returns a new [CreateClassificationRequest] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static CreateClassificationRequest? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "CreateClassificationRequest[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "CreateClassificationRequest[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return CreateClassificationRequest(
        model: mapValueOfType<String>(json, r'model')!,
        query: mapValueOfType<String>(json, r'query')!,
        examples: json[r'examples'] is List
          ? (json[r'examples'] as List).map(
              (e) => e == null ? null : (e as List).cast<String>()
            ).toList()
          : null,
        file: mapValueOfType<String>(json, r'file'),
        labels: json[r'labels'] is List
            ? (json[r'labels'] as List).cast<String>()
            : const [],
        searchModel: mapValueOfType<String>(json, r'search_model') ?? 'ada',
        temperature: json[r'temperature'] == null
            ? 0
            : num.parse(json[r'temperature'].toString()),
        logprobs: mapValueOfType<int>(json, r'logprobs'),
        maxExamples: mapValueOfType<int>(json, r'max_examples') ?? 200,
        logitBias: mapValueOfType<Object>(json, r'logit_bias'),
        returnPrompt: mapValueOfType<bool>(json, r'return_prompt') ?? false,
        returnMetadata: mapValueOfType<bool>(json, r'return_metadata') ?? false,
        expand: Object.listFromJson(json[r'expand']) ?? const [],
        user: mapValueOfType<String>(json, r'user'),
      );
    }
    return null;
  }

  static List<CreateClassificationRequest>? listFromJson(dynamic json, {bool growable = false,}) {
    final result = <CreateClassificationRequest>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = CreateClassificationRequest.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, CreateClassificationRequest> mapFromJson(dynamic json) {
    final map = <String, CreateClassificationRequest>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreateClassificationRequest.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of CreateClassificationRequest-objects as value to a dart map
  static Map<String, List<CreateClassificationRequest>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<CreateClassificationRequest>>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = CreateClassificationRequest.listFromJson(entry.value, growable: growable,);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'model',
    'query',
  };
}

