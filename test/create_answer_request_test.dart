//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for CreateAnswerRequest
void main() {
  // final instance = CreateAnswerRequest();

  group('test CreateAnswerRequest', () {
    // ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
    // String model
    test('to test the property `model`', () async {
      // TODO
    });

    // Question to get answered.
    // String question
    test('to test the property `question`', () async {
      // TODO
    });

    // List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
    // List<List<String>> examples (default value: const [])
    test('to test the property `examples`', () async {
      // TODO
    });

    // A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
    // String examplesContext
    test('to test the property `examplesContext`', () async {
      // TODO
    });

    // List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.  You should specify either `documents` or a `file`, but not both. 
    // List<String> documents (default value: const [])
    test('to test the property `documents`', () async {
      // TODO
    });

    // The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.  You should specify either `documents` or a `file`, but not both. 
    // String file
    test('to test the property `file`', () async {
      // TODO
    });

    // ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
    // String searchModel (default value: 'ada')
    test('to test the property `searchModel`', () async {
      // TODO
    });

    // The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
    // int maxRerank (default value: 200)
    test('to test the property `maxRerank`', () async {
      // TODO
    });

    // What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use. Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
    // num temperature (default value: 0)
    test('to test the property `temperature`', () async {
      // TODO
    });

    // Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.  When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs. 
    // int logprobs
    test('to test the property `logprobs`', () async {
      // TODO
    });

    // The maximum number of tokens allowed for the generated answer
    // int maxTokens (default value: 16)
    test('to test the property `maxTokens`', () async {
      // TODO
    });

    // CreateAnswerRequestStop stop
    test('to test the property `stop`', () async {
      // TODO
    });

    // How many answers to generate for each question.
    // int n (default value: 1)
    test('to test the property `n`', () async {
      // TODO
    });

    // Modify the likelihood of specified tokens appearing in the completion.  Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated. 
    // Object logitBias
    test('to test the property `logitBias`', () async {
      // TODO
    });

    // A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.  This flag only takes effect when `file` is set. 
    // bool returnMetadata (default value: false)
    test('to test the property `returnMetadata`', () async {
      // TODO
    });

    // If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
    // bool returnPrompt (default value: false)
    test('to test the property `returnPrompt`', () async {
      // TODO
    });

    // If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
    // List<Object> expand (default value: const [])
    test('to test the property `expand`', () async {
      // TODO
    });

    // A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    // String user
    test('to test the property `user`', () async {
      // TODO
    });


  });

}
